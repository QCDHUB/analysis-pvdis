#!/usr/bin/env python
import time
import os,sys
import argparse
import subprocess


#--from tools
from tools.randomstr import id_generator
from tools.tools import checkdir, load

#--user dependent paths
user    ='ccocuzza'
#path    ='/w/general-scifs17exp/JAM/'
path    ='/work/JAM/'
fitpack ='%s/ccocuzza/fitpack'%path
#fitpack ='%s/ccocuzza/fitpack3'%path
wdir    ='%s/ccocuzza/pvdis'%path
python  ='%s/apps/anaconda2/bin/python'%path
#python  ='%s/apps/anaconda3/bin/python'%path


template="""#!/bin/csh
#example: 10 cores, 20GB of memory, 10 hour time limit
#SBATCH --account=theory
#SBATCH --nodes 2
#SBATCH --partition=theory
#SBATCH --cpus-per-task welkrjlasejr 
#SBATCH --mem=2G
#SBATCH --time=0-10:00:00
#SBATCH --constraint=centos7
#SBATCH --job-name="<name>"
#SBATCH --output=<wdir>/<directory>/out/<name>.out
#SBATCH --error=<wdir>/<directory>/out/<name>.err

export FITPACK=<fitpack>
export PYTHONPATH=<fitpack>:/work/JAM/apps/lhapdf2/lib/python2.7/site-packages/
<python>  <fitpack>/fitlib/maxlike.py -n 1 -v <verbose> <input> -msrh "mv <<fname>> <wdir>/<directory>/msr/"   <prior>

"""

template=template.replace('<python>',python)
template=template.replace('<fitpack>',fitpack)
template=template.replace('<wdir>',wdir)



def gen_script(track,directory,prior=None,verbose=1,INPUT='input'):
    fname='jam-%s'%(id_generator(size=10))
    script=template[:]
    script=script.replace('<name>',fname)
    script=script.replace('<track>',track)
    script=script.replace('<directory>',directory)
    script=script.replace('<verbose>',str(verbose))
    script=script.replace('<input>',str(INPUT))
    if  prior==None: 
        script=script.replace('<prior>','')
    else: 
        script=script.replace('<prior>','-p %s'%prior)

    F=open('current.sbatch','w')
    F.writelines(script)
    F.close()

def pexit(msg):
    print(msg)
    sys.exit()

if __name__=='__main__':


    ap = argparse.ArgumentParser()
    msg =" 0: flat"
    msg+=" 1: with priors"
    msg+=" 2: with opt-priors"

    ap.add_argument('task'             ,type=int,help=msg)
    ap.add_argument('-d','--directory' ,type=str,default='unamed' 
                                       ,help='directory name to store results')
    ap.add_argument('-p','--priors'    ,type=str,default='unamed' ,help='priors')
    ap.add_argument('-n','--njobs'     ,type=int,default=1 ,help='number of jobs')
    ap.add_argument('-t','--test'      ,type=bool,default=False ,help='test flag')
    ap.add_argument('-i','--INPUT'      ,type=str,default='input' ,help='input file to use')
    args = ap.parse_args()

    if args.directory=='unamed': pexit('specify -d')

    checkdir('%s/out'%args.directory)
    checkdir('%s/msr'%args.directory)
    #os.system('cp input %s'%args.directory)
    
    if  args.task==0:

          cnt=0
          track='theory'
          while 1:
              cnt+=1 
              print cnt
              gen_script(track,args.directory,None,INPUT=args.INPUT)
              if args.test:
                  os.system('source current.sbatch')
                  break
              else:
                  os.system('source current.sbatch')
              if cnt==args.njobs: break

    elif  args.task==1 or args.task==2:
          track='theory'
          if args.task==1: path2priors='%s/%s/msr-inspected'%(wdir,args.priors)
          if args.task==2: 
              path2priors='%s/%s/msr-opt-priors'%(wdir,args.priors)
              print 'Using opt-priors...'
          msr=sorted(os.listdir(path2priors))

          path2running='%s/%s/out'%(wdir,args.directory)
          running = [_.replace('jam-','').replace('.out','.msr') \
                     for _ in os.listdir(path2running)\
                     if _.endswith('err')==False]

          done = os.listdir('%s/%s/msr'%(wdir,args.directory))
          cnt=0
          for prior in msr:
              cnt+=1
              #if cnt==2: break
              print('%d/%d'%(cnt,len(msr)))
              if prior in done: continue 
              start = time.time()
              gen_script(track,args.directory,'%s/%s'%(path2priors,prior),INPUT=args.INPUT)
              os.system('source current.sbatch')
              end = time.time()
              totaltime = end-start
              #print ('The time taken was %10.2f'%totaltime)
              if args.test: break
              time.sleep(3)

    #print ('The time taken was %10.2f'%totaltime)


